{"ast":null,"code":"var _jsxFileName = \"/home/flora/mygithub/le-flora-colored-button/src/components/ColoredButton.jsx\",\n    _s = $RefreshSig$();\n\nimport styled from 'styled-components';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ButtonStyle = styled.button`\n  background-color: ${_ref => {\n  let {\n    colorValue\n  } = _ref;\n  return colorValue !== '' ? `#${colorValue}` : 'white';\n}};\n`;\n_c = ButtonStyle;\n\nfunction ColoredButton() {\n  _s();\n\n  const [colorValue, setColorValue] = useState('white');\n  const [name, setName] = useState('Nice name');\n\n  const handleClickBtn = e => {\n    console.log('change color');\n    let randomColor = Math.floor(Math.random() * 16777215).toString(16);\n    setColorValue(randomColor);\n    setName(e.target.getAttribute('name'));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ButtonStyle, {\n      onClick: handleClickBtn,\n      colorValue: colorValue,\n      name: name,\n      children: \"Change my color !\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"My name : #\", colorValue]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"My color : #\", colorValue]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ColoredButton, \"nAZTbkH+DVsSIJmRX/DrUxWjfrc=\");\n\n_c2 = ColoredButton;\nexport default ColoredButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ButtonStyle\");\n$RefreshReg$(_c2, \"ColoredButton\");","map":{"version":3,"sources":["/home/flora/mygithub/le-flora-colored-button/src/components/ColoredButton.jsx"],"names":["styled","useState","ButtonStyle","button","colorValue","ColoredButton","setColorValue","name","setName","handleClickBtn","e","console","log","randomColor","Math","floor","random","toString","target","getAttribute"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,WAAW,GAAGF,MAAM,CAACG,MAAO;AAClC,sBAAsB;AAAA,MAAC;AAAEC,IAAAA;AAAF,GAAD;AAAA,SAClBA,UAAU,KAAK,EAAf,GAAqB,IAAGA,UAAW,EAAnC,GAAuC,OADrB;AAAA,CAC6B;AACnD,CAHA;KAAMF,W;;AAKN,SAASG,aAAT,GAAyB;AAAA;;AACvB,QAAM,CAACD,UAAD,EAAaE,aAAb,IAA8BL,QAAQ,CAAC,OAAD,CAA5C;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,WAAD,CAAhC;;AAEA,QAAMQ,cAAc,GAAIC,CAAD,IAAO;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,QAAIC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,QAA3B,EAAqCC,QAArC,CAA8C,EAA9C,CAAlB;AAEAX,IAAAA,aAAa,CAACO,WAAD,CAAb;AACAL,IAAAA,OAAO,CAACE,CAAC,CAACQ,MAAF,CAASC,YAAT,CAAsB,MAAtB,CAAD,CAAP;AACD,GAND;;AAQA,sBACE;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,OAAO,EAAEV,cAAtB;AAAsC,MAAA,UAAU,EAAEL,UAAlD;AAA8D,MAAA,IAAI,EAAEG,IAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAA,gCAAeH,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAA,iCAAgBA,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAtBQC,a;;MAAAA,a;AAwBT,eAAeA,aAAf","sourcesContent":["import styled from 'styled-components'\nimport { useState } from 'react'\n\nconst ButtonStyle = styled.button`\n  background-color: ${({ colorValue }) =>\n    colorValue !== '' ? `#${colorValue}` : 'white'};\n`\n\nfunction ColoredButton() {\n  const [colorValue, setColorValue] = useState('white')\n  const [name, setName] = useState('Nice name')\n\n  const handleClickBtn = (e) => {\n    console.log('change color')\n    let randomColor = Math.floor(Math.random() * 16777215).toString(16)\n\n    setColorValue(randomColor)\n    setName(e.target.getAttribute('name'))\n  }\n\n  return (\n    <div>\n      <ButtonStyle onClick={handleClickBtn} colorValue={colorValue} name={name}>\n        Change my color !\n      </ButtonStyle>\n\n      <p>My name : #{colorValue}</p>\n      <p>My color : #{colorValue}</p>\n    </div>\n  )\n}\n\nexport default ColoredButton\n"]},"metadata":{},"sourceType":"module"}